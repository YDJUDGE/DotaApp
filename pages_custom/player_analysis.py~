from fpdf import FPDF
import os
import streamlit as st
from players.main_function import fetch_last_matches_detailed, fetch_player_profile
from players.main_functions import calculate_skill_score, get_roles_from_matches, calculate_transfer_price, \
    load_rank_mapping
from players.classification import normalize_roles_for_modifier, calculate_role_modifier, classify_player
from players.main_functions import calculate_salary


def player_analysis_page():
    st.title("üíé –ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–∫–∞ Dota 2 –∏ –æ—Ü–µ–Ω–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏")

    account_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ Steam Account ID (—á–∏—Å–ª–æ):")
    run = st.button("üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")

    if run and account_id:
        try:
            account_id_int = int(account_id)
        except ValueError:
            st.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π Account ID")
            return

        with st.spinner("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞. –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å, –≠—Ç–æ –∑–∞–π–º—ë—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã"):

            profile = fetch_player_profile(account_id_int)
            matches = fetch_last_matches_detailed(account_id_int, limit=100)
            rank_mapping = load_rank_mapping()

            rank_tier = profile.get("rank_tier", 0)
            rank_info = rank_mapping.get(str(rank_tier), {"name": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "mmr": 0})
            rank_name = rank_info["name"]
            estimated_mmr = rank_info["mmr"]

        if not matches or len(matches) < 10:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏ –∏–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ")
            return

        real_mmr = profile.get("real_mmr_score", 0)

        if real_mmr >= 3000:
            mmr_text = str(real_mmr)
            mmr_for_calc = real_mmr
        elif real_mmr > 0:
            mmr_text = "–Ω–∏–∂–µ 3000"
            mmr_for_calc = 0
        elif estimated_mmr > 0:
            mmr_text = f"~{estimated_mmr} (–ø–æ —Ä–∞–Ω–≥—É: {rank_name})"
            mmr_for_calc = estimated_mmr
        else:
            mmr_text = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
            mmr_for_calc = 0

        skill_score = calculate_skill_score(matches)
        skill_score = max(skill_score, 0)
        roles = get_roles_from_matches(matches)
        normalized_roles = normalize_roles_for_modifier(roles)
        role_modifier, versatility_bonus = calculate_role_modifier(normalized_roles)
        player_class = classify_player(matches)

        behavior_coeff = 1.0  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
        media_score = 3  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞

        transfer_price = calculate_transfer_price(
            skill_score,
            mmr_for_calc,
            media_score,
            role_modifier,
            behavior_coeff,
            versatility_bonus
        )
        salary = calculate_salary(
            transfer_price=transfer_price,
            mmr=mmr_for_calc,
            role_modifier=role_modifier,
            behavior_coeff=behavior_coeff,
            media_score=media_score,
        )

        st.markdown(f"""
            ## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}

            - **Skill Score:** {skill_score}
            - **–ó–≤–∞–Ω–∏–µ:** {rank_name}
            - **MMR:** {mmr_text}
            - **–†–æ–ª–∏ (–∏–≥—Ä–∞–µ—Ç):** {', '.join(roles) if roles else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}
            - **–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–ª–∏:** {role_modifier}
            - **–ë–æ–Ω—É—Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏:** {versatility_bonus}
            - **–¢–∏–ø –∏–≥—Ä–æ–∫–∞:** {player_class}
            - **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** ${transfer_price}
            - **–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–∞—è –º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:** ${salary}
            """)

        pdf = FPDF()
        pdf.add_page()

        # –ü—É—Ç–∏ –∫ —à—Ä–∏—Ñ—Ç–∞–º
        font_path_regular = os.path.join("assets", "fonts", "DejaVuSans.ttf")
        font_path_bold = os.path.join("assets", "fonts", "DejaVuSans-Bold.ttf")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∏ –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
        pdf.add_font("DejaVu", "", font_path_regular, uni=True)
        pdf.add_font("DejaVu", "B", font_path_bold, uni=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.set_font("DejaVu", size=18)
        pdf.set_text_color(30, 30, 30)
        pdf.cell(0, 10, txt="üìÑ –†–µ–∑—é–º–µ –∏–≥—Ä–æ–∫–∞ Dota 2", ln=True, align="C")
        pdf.ln(8)

        # –¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        pdf.set_text_color(0, 0, 0)
        data = [
            ("Steam ID", account_id),
            ("Skill Score", f"{skill_score:.2f}"),
            ("–ó–≤–∞–Ω–∏–µ", rank_name),
            ("MMR", mmr_text),
            ("–†–æ–ª–∏", ', '.join(roles) if roles else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'),
            ("–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–ª–∏", role_modifier),
            ("–ë–æ–Ω—É—Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏", versatility_bonus),
            ("–¢–∏–ø –∏–≥—Ä–æ–∫–∞", player_class),
            ("–¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"${transfer_price:,.2f}"),
            ("–ú–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", f"${salary:,.2f}")
        ]

        for label, value in data:
            pdf.set_font("DejaVu", "B", 12)
            pdf.cell(60, 10, txt=label + ":", ln=0)
            pdf.set_font("DejaVu", "", 12)
            pdf.cell(0, 10, txt=str(value), ln=1)

        # –ü–æ–¥–ø–∏—Å—å
        pdf.ln(5)
        pdf.set_font("DejaVu", "", 10)
        pdf.set_text_color(150, 150, 150)
        pdf.cell(0, 10, txt="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", ln=1, align="R")

        pdf_output = bytes(pdf.output(dest="S"))

        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å PDF-—Ä–µ–∑—é–º–µ",
            data=pdf_output,
            file_name=f"player_{account_id}_summary.pdf",
            mime="application/pdf"
        )

