from heroes.main_functions import is_win
from collections import defaultdict
import os
import json
from collections import Counter

_rank_mapping = None
_role_descriptions = None

def load_rank_mapping():
    global _rank_mapping
    if _rank_mapping is None:
        file_path = os.path.join("data", "ranks.json")
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                _rank_mapping = json.load(f)
        except Exception as e:
            print(f"❌ Ошибка загрузки ranks.json: {e}")
            _rank_mapping = {}
    return _rank_mapping


def load_role_descriptions(path="data/role.json"):
    global _role_descriptions
    if _role_descriptions is None:
        with open(path, "r", encoding="utf-8") as f:
            _role_descriptions = json.load(f)
    return _role_descriptions


def calculate_winrate(matches):
    wins = sum(1 for m in matches if is_win(m))
    return wins / len(matches)

def calculate_skill_score(matches):
    if not matches:
        return 0

    total_kills = sum(m['kills'] for m in matches)
    total_assists = sum(m['assists'] for m in matches)
    total_deaths = sum(m['deaths'] if m['deaths'] > 0 else 1 for m in matches)
    kda_ratio = (total_kills + total_assists) / total_deaths
    kda_score = min(kda_ratio / 5 * 20, 20)  # Нормализация

    avg_gpm = sum(m.get('gold_per_min', 0) for m in matches) / len(matches)
    avg_xpm = sum(m.get('xp_per_min', 0) for m in matches) / len(matches)
    gpm_xpm_score = min(((avg_gpm + avg_xpm) / 2 - 300) / 5, 10)

    winrate = calculate_winrate(matches)
    winrate_score = winrate * 10

    total_team_kills = sum(m['kills'] + m['assists'] for m in matches) + 1
    fight_participation = (total_kills + total_assists) / total_team_kills
    fight_score = min(fight_participation * 10, 10)


    hero_counts = defaultdict(int)
    for m in matches:
        hero_counts[m['hero_id']] += 1
    diverse_heroes = sum(1 for count in hero_counts.values() if count >= 3)
    hero_pool_score = max(min(diverse_heroes / 10 * 10, 10), 0)

    total = kda_score + gpm_xpm_score + winrate_score + fight_score + hero_pool_score
    return round(total, 2)

def get_roles_from_matches(matches):
    roles_counter = Counter()

    for m in matches:
        dmg = m.get("hero_damage", 0)
        heal = m.get("hero_healing", 0)
        bld = m.get("tower_damage", 0)
        total = dmg + heal + bld + 1  # защита от деления на 0

        share_dmg = dmg / total
        share_heal = heal / total
        share_bld = bld / total

        if share_dmg > 0.5 and share_bld > 0.2:
            roles_counter["Керри"] += 1
        elif share_heal > 0.25 or (share_dmg < 0.4 and share_heal > 0.15):
            roles_counter["Саппорт"] += 1
        elif share_dmg > 0.55 and share_bld < 0.1 and share_heal < 0.1:
            roles_counter["Инициатор"] += 1
        elif share_bld > 0.4 and share_dmg < 0.4:
            roles_counter["Пушер"] += 1
        elif abs(share_dmg - share_heal) < 0.15 and abs(share_dmg - share_bld) < 0.15:
            roles_counter["Универсал"] += 1
        else:
            roles_counter["Другое"] += 1

    # Оставим только топ-2 роли
    most_common = roles_counter.most_common(2)
    return [role for role, _ in most_common]


def calculate_transfer_price(skill_score, mmr, media_score,
                             role_modifier=1.0, behavior_coeff=1.0,
                             versatility_bonus=1.0, base_rate=1000):
    mmr_score = min(max((mmr - 4000) / 200 * 1.5, 0), 15)
    total_score = (skill_score + mmr_score + media_score)
    adjusted_score = total_score * role_modifier * behavior_coeff * versatility_bonus
    transfer_price = adjusted_score * base_rate
    return round(transfer_price, 2)

